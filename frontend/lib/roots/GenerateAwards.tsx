/* eslint-disable @next/next/no-img-element */
import React, { useEffect, useState } from "react";
import { Button, Flex, NumberInput, Switch, Table, TextInput } from '@mantine/core';
import { FileInput, Paper } from '@mantine/core';
import html2canvas from "html2canvas";
import pairStyles from './pair.module.css';
import { IconSpace, IconUpload } from '@tabler/icons-react';
import { useDispatch, useSelector } from "react-redux";
import { RootState } from "../store/reducers/reduce";
import { setPadding, setTName } from "../store/slices/tourn";

interface IResult {
    teamA: string;
    teamB: string;
    teamAW: number;
    totalVotes: number;
}

interface IAwardsTable {
    tournamentName: string;
    label: string;
    data: Array<IResult> | string
}

const AwardsTable: React.FC<IAwardsTable> = ({tournamentName, label, data}) => {
    const name = useSelector((state: RootState) => state.auth.name);
    const [currentTime, setCurrentTime] = useState(new Date());

    useEffect(() => {
        const timer = setInterval(() => {
          setCurrentTime(new Date());
        }, 1000);
    
        // The return function is a clean-up function that React calls when the component unmounts.
        return () => {
          clearInterval(timer);
        };
    }, []);

    const format = (date: Date) => {
        const addZero = (n: number) => n < 10 ? '0' + n : n;
        const month = addZero(date.getMonth() + 1);  // getMonth() is zero-based
        const day = addZero(date.getDate());
        const hours = addZero(date.getHours());
        const minutes = addZero(date.getMinutes());
        const seconds = addZero(date.getSeconds());
        
        return `${month}/${day} @ ${hours}:${minutes}:${seconds}`;
    }

    const PADDING_GLOBAL_VARIABLE = `${useSelector((state: RootState) => state.tourn.padding) / 400}rem`;
    let bgc = "#003A77";

    return (
        <div style={{color: "#003A77", width: "75%", minWidth: "1000px", display: "flex", flexDirection: "column", textAlign: "center", padding: "1.25rem", whiteSpace: "nowrap"}} id="CONTAINER_TO_EXPORT">
            <div style={{fontFamily: `Georgia, "Times New Roman", Times, serif`, fontWeight: "bold", fontSize: "3rem"}}>{tournamentName}</div>
            <div style={{fontFamily: `Georgia, "Times New Roman", Times, serif`, fontWeight: "bold", fontSize: "2rem"}}>{label}</div>
            
            <div style={{display: "flex", flexDirection: "column", justifyContent: "center", width: "100%"}}>
                <Table style={{marginTop: PADDING_GLOBAL_VARIABLE, marginBottom: "1rem", textAlign: "left", fontSize: "1.125rem", border: "1px solid black"}}>
                    <tr>
                        <td style={{padding: PADDING_GLOBAL_VARIABLE, border: "1px solid black", backgroundColor: bgc, color: "white", fontWeight: "bold", width: "fit-content", textAlign: "center", whiteSpace: "nowrap"}}>Team</td>
                        <td style={{padding: PADDING_GLOBAL_VARIABLE, border: "1px solid black", backgroundColor: bgc, color: "white", fontWeight: "bold", width: "fit-content", textAlign: "center", whiteSpace: "nowrap"}}>Team</td>
                        <td style={{padding: PADDING_GLOBAL_VARIABLE, border: "1px solid black", backgroundColor: bgc, color: "white", fontWeight: "bold", width: "fit-content", textAlign: "center", whiteSpace: "nowrap"}}>Result</td>
                    </tr>
                    {(data as IResult[]).map((e,i) => (
                        <tr key={`row-${i}`}>
                            <td style={{padding: PADDING_GLOBAL_VARIABLE, border: "1px solid black", width: "25%", fontFamily: "inherit", color: "black", textAlign: "center", whiteSpace: "nowrap"}}>{e.teamA}</td>
                            <td style={{padding: PADDING_GLOBAL_VARIABLE, border: "1px solid black", width: "25%", fontFamily: "inherit", color: "black", textAlign: "center", whiteSpace: "nowrap"}}>{e.teamB}</td>
                            <td style={{padding: PADDING_GLOBAL_VARIABLE, border: "1px solid black", fontFamily: "inherit", color: "black", textAlign: "center", whiteSpace: "nowrap"}}>{
                                e.teamAW > e.totalVotes-e.teamAW ?
                                `${e.teamA} wins ${e.teamAW}-${e.totalVotes-e.teamAW}` :
                                `${e.teamB} wins ${e.totalVotes-e.teamAW}-${e.teamAW}`
                                }</td>
                        </tr>
                    ))}
                </Table>
            </div>

            <div style={{display: "flex", flexDirection: "column", width: "100%", padding: "1rem", textAlign: "left"}}>
                <img style={{width: "35%"}} alt={"Logo"} src={"/logo.png"}/>
                <div style={{fontWeight: 500, fontSize: "0.5rem"}}>{tournamentName} - {label}</div>
                <div style={{fontWeight: 300, fontSize: "0.5rem"}}>Generated by {name} at {format(currentTime)}</div>
            </div>
        </div>
    );
}

const NumbersTable: React.FC<IAwardsTable> = ({tournamentName, label, data}) => {
    const name = useSelector((state: RootState) => state.auth.name);
    const [currentTime, setCurrentTime] = useState(new Date());

    useEffect(() => {
        const timer = setInterval(() => {
          setCurrentTime(new Date());
        }, 1000);
    
        // The return function is a clean-up function that React calls when the component unmounts.
        return () => {
          clearInterval(timer);
        };
    }, []);

    const format = (date: Date) => {
        const addZero = (n: number) => n < 10 ? '0' + n : n;
        const month = addZero(date.getMonth() + 1);  // getMonth() is zero-based
        const day = addZero(date.getDate());
        const hours = addZero(date.getHours());
        const minutes = addZero(date.getMinutes());
        const seconds = addZero(date.getSeconds());
        
        return `${month}/${day} @ ${hours}:${minutes}:${seconds}`;
    }

    const PADDING_GLOBAL_VARIABLE = `${useSelector((state: RootState) => state.tourn.padding) / 400}rem`;
    let bgc = "#003A77";
    let parsedData = `${data as string}`.match(/\d+/g) || [];
    parsedData = parsedData.sort((a: string, b: string) => parseInt(a) - parseInt(b));
    const COLUMN_COUNT = 4;
    const reshapedData = Array.from(
        { length: Math.ceil(parsedData.length / COLUMN_COUNT) },
        (_, i) => Array.from(
            { length: COLUMN_COUNT },
            (_, j) => parsedData[i + j * Math.ceil(parsedData.length / COLUMN_COUNT)]
        )
    );

    return (
        <div style={{color: "#003A77", width: "75%", minWidth: "1000px", display: "flex", flexDirection: "column", textAlign: "center", padding: "1.25rem", whiteSpace: "nowrap"}} id="CONTAINER_TO_EXPORT">
            <div style={{fontFamily: `Georgia, "Times New Roman", Times, serif`, fontWeight: "bold", fontSize: "3rem"}}>{tournamentName}</div>
            <div style={{fontFamily: `Georgia, "Times New Roman", Times, serif`, fontWeight: "bold", fontSize: "2rem"}}>{label}</div>
            
            <div style={{display: "flex", flexDirection: "column", justifyContent: "center", width: "100%"}}>
                <Table style={{marginTop: PADDING_GLOBAL_VARIABLE, marginBottom: "1rem", textAlign: "left", fontSize: "1.125rem", border: "1px solid black"}}>
                    <tr>
                        <td style={{padding: PADDING_GLOBAL_VARIABLE, border: "1px solid black", backgroundColor: bgc, color: "white", fontWeight: "bold", width: "fit-content", textAlign: "center", whiteSpace: "nowrap"}}></td>
                        <td style={{padding: PADDING_GLOBAL_VARIABLE, border: "1px solid black", backgroundColor: bgc, color: "white", fontWeight: "bold", width: "fit-content", textAlign: "center", whiteSpace: "nowrap"}}></td>
                        <td style={{padding: PADDING_GLOBAL_VARIABLE, border: "1px solid black", backgroundColor: bgc, color: "white", fontWeight: "bold", width: "fit-content", textAlign: "center", whiteSpace: "nowrap"}}></td>
                        <td style={{padding: PADDING_GLOBAL_VARIABLE, border: "1px solid black", backgroundColor: bgc, color: "white", fontWeight: "bold", width: "fit-content", textAlign: "center", whiteSpace: "nowrap"}}></td>
                    </tr>
                    {reshapedData.map((e,i) => (
                        <tr key={`row-${i}`}>
                            {e.map((c, a) => (
                                <td key={`col-${i}-${a}`} style={{padding: PADDING_GLOBAL_VARIABLE, border: "1px solid black", width: "25%", fontFamily: "inherit", color: "black", textAlign: "center", whiteSpace: "nowrap"}}>{c}</td>
                            ))}
                        </tr>
                    ))}
                    <tr>
                        <td style={{padding: PADDING_GLOBAL_VARIABLE, border: "1px solid black", backgroundColor: bgc, color: "white", fontWeight: "bold", width: "fit-content", textAlign: "center", whiteSpace: "nowrap"}}></td>
                        <td style={{padding: PADDING_GLOBAL_VARIABLE, border: "1px solid black", backgroundColor: bgc, color: "white", fontWeight: "bold", width: "fit-content", textAlign: "center", whiteSpace: "nowrap"}}></td>
                        <td style={{padding: PADDING_GLOBAL_VARIABLE, border: "1px solid black", backgroundColor: bgc, color: "white", fontWeight: "bold", width: "fit-content", textAlign: "center", whiteSpace: "nowrap"}}></td>
                        <td style={{padding: PADDING_GLOBAL_VARIABLE, border: "1px solid black", backgroundColor: bgc, color: "white", fontWeight: "bold", width: "fit-content", textAlign: "center", whiteSpace: "nowrap"}}></td>
                    </tr>
                </Table>
            </div>

            <div style={{display: "flex", flexDirection: "column", width: "100%", padding: "1rem", textAlign: "left"}}>
                <img style={{width: "35%"}} alt={"Logo"} src={"/logo.png"}/>
                <div style={{fontWeight: 500, fontSize: "0.5rem"}}>{tournamentName} - {label}</div>
                <div style={{fontWeight: 300, fontSize: "0.5rem"}}>Generated by {name} at {format(currentTime)}</div>
            </div>
        </div>
    );
}

export const GenerateAwards: React.FC = () => {
    const [file, setFile] = useState<File | null>(null);
    const [fileContent, setContent] = useState("");
    const [fileError, _] = useState("");
    const [results, setResults] = useState<Array<IResult>>([]);
    const [sao, setSao] = useState(false);
    const [label, setLabel] = useState("SET ME MANUALLY");
    const [numericalOrder, setNumericalOrder] = useState(true);
    const [rawNumbers, setRawNumbers] = useState("");
    const [isLoading, setIsLoading] = useState(false);

    // some redux
    const dispatch = useDispatch();
    const tournamentName = useSelector((state: RootState) => state.tourn.tournamentName);

    const exportAsPicture = () => {
        let data = document.getElementById('CONTAINER_TO_EXPORT')!
        html2canvas(data).then((canvas)=>{
            let image = canvas.toDataURL('image/png', 1.0);
            let fileName = `${label}.png`;
            saveAs(image, fileName)
        })

        setIsLoading(false);
    }

    const saveAs = (blob: any, fileName: string) =>{
        let elem = window.document.createElement('a');
        elem.href = blob
        elem.download = fileName;
        (document.body || document.documentElement).appendChild(elem);
        if (typeof elem.click === 'function') {
            elem.click();
        } else {
            elem.target = '_blank';
            elem.dispatchEvent(new MouseEvent('click', {
            view: window,
            bubbles: true,
            cancelable: true
            }));
        }
        URL.revokeObjectURL(elem.href);
        elem.remove()
    }

    useEffect(() => {
        if(!file) return;
        file.text().then((res) => {
            setContent(res);
        })
    }, [file]);
    
    useEffect(() => {
        let LINES = fileContent.split("\n");
        if(!LINES[0].includes("Sect") || !LINES[0].includes("Bkt")) return;

        LINES = LINES.splice(1);
        let map: { [key: string]: IResult } = {};
        let division = "";

        for(let LINE of LINES) {
            let data = LINE.split(",");
            let firstChar = parseInt(data[3].charAt(0));
            if(firstChar < 3) {
                division = "Middle School";
            } else if(firstChar < 5) {
                division = "Novice";
            } else if(firstChar < 8) {
                division = "Open";
            } else {
                division = "Varsity";
            }

            let cur = map[`R${data[3]}${data[5]}`];
            if(!cur) {
                map[`R${data[3]}${data[5]}`] = {
                    teamA: data[3],
                    teamB: data[5],
                    teamAW: 0,
                    totalVotes: 0,
                }
            }

            map[`R${data[3]}${data[5]}`].totalVotes ++;
            map[`R${data[3]}${data[5]}`].teamAW += (data[4] === "W" ? 1 : 0)
        }

        let uniqueResults = Object.values(map);
        let numberOfTeams = uniqueResults.length * 2;
        let log_2_length = Math.log(numberOfTeams)/Math.log(2);
        let nextPower = Math.ceil(log_2_length) - 1;
        let roundNameList = ["Finals", "Semifinals", "Quarterfinals", "Octofinals", "Double Octofinals", "Triple Octofinals"]
        let isPartial = log_2_length - 1 != nextPower;

        setLabel(`${division} ${isPartial ? "Partial" : ""} ${roundNameList[nextPower]}`)
        setResults(uniqueResults);
    }, [fileContent]);

    const PADDING = useSelector((state: RootState) => state.tourn.padding);

    return (
        <div>
            <Paper shadow="lg" p="lg" radius="lg" withBorder>
                
                <div className={pairStyles.advOptions}>Pick ONE</div>
                <Paper style={{width: "100%"}} withBorder p="md">
                    <Flex direction="column" gap="sm">
                        <FileInput disabled={!!rawNumbers} required error={fileError} onChange={setFile} accept=".csv" label="Result Spreadsheet" placeholder="result spreadsheet" icon={<IconUpload size={"1rem"} />} />
                        <TextInput disabled={!!file} value={rawNumbers} onChange={(e) => setRawNumbers(e.target.value)} required label="Raw Numbers" placeholder="123124, 125126, ..." />
                        <Button disabled={!rawNumbers && !file} onClick={() => {
                            setFile(null);
                            setContent("");
                            setRawNumbers("");
                        }} variant="outline" color="red" radius="xl" uppercase loading={isLoading}>
                            Clear
                        </Button>
                    </Flex>
                </Paper>

                <div className={pairStyles.advOptions}>Change the words</div>
                <Paper style={{width: "100%"}} withBorder p="md">
                    <TextInput value={tournamentName} onChange={(e) => dispatch(setTName(e.target.value))} required label="Tournament Name" placeholder="national tournament" />
                    <TextInput value={label} onChange={(e) => setLabel(e.target.value)} required label={file ? "Round Name" : "Award Label"} placeholder="open speakers" />
                </Paper>

                <div className={pairStyles.advOptions} onClick={() => setSao(!sao)}>{sao ? "Hide" : "Show"} Advanced Options</div>
                {sao && <Paper withBorder p={"xs"}>
                    <div className={pairStyles.advOptionsFlex}>
                        <NumberInput onChange={(e) => {
                            dispatch(setPadding(e));
                        }} value={
                            PADDING
                        } label="Spacing" min={10} max={100} step={10} placeholder="100 (default)" icon={<IconSpace size={"1rem"} />} />
                        <Switch checked={numericalOrder} onChange={(e) => setNumericalOrder(e.target.checked)} label={'Show in numerical order?'} description={"Show numerically, or show by rank"}/>
                    </div>
                </Paper>}

                <div className={pairStyles.advOptions}>
                    <Button disabled={(!file && !rawNumbers) || label === "SET ME MANUALLY"} onClick={() => {
                        setIsLoading(true);
                        exportAsPicture();
                    }} variant="outline" color="red" radius="xl" uppercase loading={isLoading}>
                        Export
                    </Button>
                </div>

            </Paper>

            {file && <AwardsTable tournamentName={tournamentName} label={file ? `${label} Results` : label} data={results}/>}
            {rawNumbers && <NumbersTable tournamentName={tournamentName} label={label} data={rawNumbers}/>}
        </div>
    );
};

export default GenerateAwards;
